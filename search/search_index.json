{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Table of Contents","text":"<ul> <li>Getting Familiar with Git<ul> <li>What is Git?</li> <li>Installing Git</li> <li>Common Git Commands</li> <li>Configuring Git</li> <li>Basic Git Workflow</li> <li>Pull Request Merging Guidelines</li> <li>Git Best Practices</li> </ul> </li> <li>Using GitHub Effectively<ul> <li>GitHub Guides</li> <li>GitHub Access Control</li> <li>Creating a Repository</li> <li>Creating a Pull Request Template</li> </ul> </li> </ul>"},{"location":"git-basics/basic-git-workflow/","title":"Basic Git Workflow","text":"<p>This document describes a common Git workflow that you will likely encounter every day.  It will cover the following topics:</p> <ul> <li>Cloning a repository</li> <li>Creating a branch</li> <li>Making changes to a branch</li> <li>Committing those changes</li> <li>Pushing the changes to the remote repository</li> <li>Opening a pull request</li> <li>Requesting a code review</li> <li>Merging a pull request</li> </ul> <p>This document assumes that you have Git installed on your machine, have it configured properly, and have an existing repository to work with in GitHub.</p>"},{"location":"git-basics/basic-git-workflow/#cloning-the-repository","title":"Cloning the repository","text":"<p>It's typically recommended to clone all of your Git repositories to the same parent directory.  A good practice is to create a <code>~/workspace</code> directory where you can manage all of your projects. Assuming that we are working with the repository https://github.com/SSMHealth/cg-documentation, we can clone it to our local machine by running the following command:</p> <pre><code>mkdir ~/workspace\ncd ~/workspace\ngit clone https://github.com/SSMHealth/cg-documentation.git\ncd cg-documentation\n</code></pre> <p>This will create a new directory called <code>cg-documentation</code> inside of your <code>~/workspace</code> directory.</p>"},{"location":"git-basics/basic-git-workflow/#creating-a-branch","title":"Creating a branch","text":"<p>Branches are used to develop features, fix bugs, or experiment with new ideas.  They are a way to keep your changes separate from the main branch.  The main branch is typically called <code>main</code> or <code>master</code>.</p> <p>To create a new branch, you can use the following command:</p> <pre><code>git checkout -b feature/my-feature\n</code></pre> <p>This will create a new branch called <code>feature/my-feature</code> and switch to it.</p>"},{"location":"git-basics/basic-git-workflow/#making-changes-to-a-branch","title":"Making changes to a branch","text":"<p>Once you have created a branch, you can make changes to the code.  When you make changes, you will need to stage them and then commit them to the branch.</p> <p>To stage all of your changes, you can use the following command:</p> <pre><code>git add .\n</code></pre> <p>If you want to stage specific files, you can replace the <code>.</code> with the path to the file you want to stage.  For example, to stage the <code>README.md</code> file, you can use the following command:</p> <pre><code>git add README.md\n</code></pre> <p>It's useful to stage your commits in smaller chunks, but it's not required.</p>"},{"location":"git-basics/basic-git-workflow/#committing-changes","title":"Committing changes","text":"<p>Once you have staged your changes, you can commit them to the branch by running the following command:</p> <pre><code>git commit -m \"A meaningful commit message\"\n</code></pre> <p>This will create a new commit with the changes you have staged.  The commit message is a short description of the changes you made.  It's important to write a meaningful commit message so that you can easily understand the changes you made later.  See writing good commit messages for more information.</p>"},{"location":"git-basics/basic-git-workflow/#pushing-changes-to-the-remote-repository","title":"Pushing changes to the remote repository","text":"<p>Once you have committed your changes, you can push them to the remote repository by running the following command:</p> <pre><code>git push origin feature/my-feature\n</code></pre> <p>This will push your changes to the <code>feature/my-feature</code> branch on the remote repository.</p>"},{"location":"git-basics/basic-git-workflow/#opening-a-pull-request","title":"Opening a pull request","text":"<p>Now that you have pushed your changes to the remote repository, you can open a pull request.  It's possible to open a pull request from the command line, but it's far more common and easier to do this through the GitHub web interface.</p> <p>To open a pull request, you can navigate to the repository on GitHub and click the \"Pull requests\" tab.  Then, click the \"New pull request\" button.</p> <p></p> <p>Next, you will need to select the branch you want to merge into the main branch by changing the \"compare\" branch.  Then, click the \"Create pull request\" button.  As a side note, it's useful to know that when you push changes to a new branch, if you visit the repository's homepage, you will see a button that says \"Compare &amp; pull request\".  Clicking this will take you to the same place as the steps above.</p> <p></p> <p>This will open a new pull request with the changes you have pushed to the remote repository.  You can add a title, description, and any other details you want to include in the pull request.  For more advanced GitHub users, it's also possible to create a pull request template for each repository, which will auto-populate the pull request with a default title, description, and other details.</p>"},{"location":"git-basics/basic-git-workflow/#requesting-a-code-review","title":"Requesting a code review","text":"<p>Once you have opened a pull request, you can request a code review from another developer.  To do this, you can click the \"Reviewers\" button and select the developer you want to review your changes.</p> <p></p> <p>This will send a notification and/or email to the developer you selected.  They will then be able to review your changes and provide feedback.</p> <p>It's also not a bad idea to message the reviewer(s) on Microsoft Teams, or even better, you can create a Teams channel for your team, create a tag for code reviewers, and then mention the tag in the Teams channel with a link to the pull request.  This will alert all of the reviewers in a centralized place so that you don't have to message each one individually.  That way, everyone is on the same page.</p>"},{"location":"git-basics/basic-git-workflow/#merging-a-pull-request","title":"Merging a pull request","text":"<p>Once you have received feedback and approved the pull request, you can merge it into the main branch. If you haven't already, read the guidelines for merging pull requests.</p>"},{"location":"git-basics/common-git-commands/","title":"Common Git Commands","text":"<p>You can find a list of all Git commands on the official Git documentation site.  Listed below are some of the most common Git commands you will use on a daily basis.</p>"},{"location":"git-basics/common-git-commands/#git-init","title":"<code>git init</code>","text":"<p>Initializes a new Git repository in your project folder.</p>"},{"location":"git-basics/common-git-commands/#git-clone-url","title":"<code>git clone [url]</code>","text":"<p>Copies an existing Git repository from a remote server (like GitHub) to your local machine.</p>"},{"location":"git-basics/common-git-commands/#git-status","title":"<code>git status</code>","text":"<p>Shows you the current state of your working directory\u2014whether files have been changed, added, or are ready to be committed.</p>"},{"location":"git-basics/common-git-commands/#git-add-file","title":"<code>git add [file]</code>","text":"<p>Stages a file (or files) for the next commit. It\u2019s like saying, \u201cHey Git, include these changes in the next snapshot.\u201d</p>"},{"location":"git-basics/common-git-commands/#git-commit-m-message","title":"<code>git commit -m \"message\"</code>","text":"<p>Saves the staged changes with a descriptive message explaining what you did.</p>"},{"location":"git-basics/common-git-commands/#git-push","title":"<code>git push</code>","text":"<p>Uploads your local commits to a remote repository (like GitHub), so others can see and collaborate on your work.</p>"},{"location":"git-basics/common-git-commands/#git-pull","title":"<code>git pull</code>","text":"<p>Fetches the latest changes from a remote repository and merges them into your local branch.</p>"},{"location":"git-basics/common-git-commands/#git-branch","title":"<code>git branch</code>","text":"<p>Lists all the branches in your repository (branches are like parallel versions of your project).</p>"},{"location":"git-basics/common-git-commands/#git-checkout-branch","title":"<code>git checkout [branch]</code>","text":"<p>Switches to a different branch to work on a different version of your project.</p>"},{"location":"git-basics/common-git-commands/#git-merge-branch","title":"<code>git merge [branch]</code>","text":"<p>Combines the changes from one branch into another, usually to bring new features into the main project.</p>"},{"location":"git-basics/common-git-commands/#git-fetch","title":"<code>git fetch</code>","text":"<p>Fetches the latest changes from a remote repository without merging them.</p>"},{"location":"git-basics/configuring-git/","title":"Configuring Git","text":"<p>To configure Git locally, it is recommended to use the following commands:</p> <pre><code>git config --global user.name \"name\" # Where name is your full name (e.g., \"Brian Thompson\")\ngit config --global user.email \"email\" # Where email is your SSM email (e.g., \"brian.thompson@ssmhealth.com\")\n</code></pre> <p>You can also configure Git to save your credentials for a certain period of time, which is useful if you don't want to have to enter your credentials every time you push or pull.</p> <pre><code>git config --global credential.helper store\n</code></pre> <p>To increase the amount of time Git will save your credentials, you can use the following command, where the timeout is in seconds (e.g., 3600 seconds = 1 hour):</p> <pre><code>git config --global credential.helper 'cache --timeout=604800' # 1 week\n</code></pre>"},{"location":"git-basics/git-best-practices/","title":"Git Best Practices","text":"<p>Here's the rundown of some of widely recommended practices for using Git based on general expertise and insights from the developer community.</p> <ol> <li>Commit early and often (with meaningful messages).</li> <li>Use branches strategically.</li> <li>Pull and merge regularly.</li> <li>Leverage <code>.gitignore</code>.</li> <li>Review code before merging.</li> <li>Tag releases</li> <li>Backup and sync with remotes.</li> <li>Use Git tools and aliases.</li> <li>Keep history clean.</li> <li>Document your workflow.</li> </ol>"},{"location":"git-basics/git-best-practices/#commit-early-and-often","title":"Commit early and often","text":"<ul> <li>Make small, focused commits that address one logical change at a time (e.g., fixing a bug, adding   a feature, refactoring code, etc.)</li> <li>Write clear and concise commit messages that describe the changes made.</li> <li>Use the present tense in the commit message (e.g., \"Add feature X\" instead of \"Added feature X\").</li> <li>Use the imperative mood in the commit message (e.g., \"Fix bug\" instead of \"Fixed bug\").</li> </ul> <p>A common format is:</p> <pre><code>&lt;type&gt;(&lt;scope (optional)&gt;): &lt;short  summary (50 chars or less)&gt;\n&lt;blank line&gt;\n&lt;detailed explanation (wrap at 72 characters), if needed&gt;\n</code></pre> <p>Examples:</p> <pre><code>feat(ui): add new button to toggle dark mode\n</code></pre> <pre><code>fix(api): fix bug in user authentication\n</code></pre> <pre><code>refactor(auth): improve user authentication code\n\nRefactored user authentication code to use a more secure method.\n</code></pre> <p>See Writing good commit messages to learn how to write better commit messages.</p>"},{"location":"git-basics/git-best-practices/#use-branches-strategically","title":"Use branches strategically","text":"<ul> <li>Keep the <code>main</code> (or <code>master</code>) branch stable and production-ready.  Avoid committing directly to it.</li> <li>Create feature branches for new work (e.g., <code>feature/add-login-page</code>), bug fixes (e.g.,   <code>fix/bugs-123</code>), or experiments.  Name them descriptively so that others (and your future self)   can understand the purpose of the branch at a glance.</li> <li>Use a branching strategy like   Gitflow or GitHub   Flow to manage branches.</li> <li>Delete branches after merging to keep the repository clean (<code>git branch -d &lt;branch-name&gt;</code>).  You   can also delete branches in the GitHub web interface.</li> </ul>"},{"location":"git-basics/git-best-practices/#pull-and-merge-regularly","title":"Pull and merge regularly","text":"<ul> <li>Pull updates from the remote repository (<code>git pull</code>) to your local branch regularly to avoid merge conflicts.</li> <li>Use <code>git rebase</code> to keep a cleaner history when working on your branch, but be cautious if others   are collaborating on the same branch since rebasing rewrites the commit history.</li> <li>Resolve merge conflicts promptly and test thoroughly after merging.</li> <li>Merge branches back into the <code>main</code> (or <code>master</code>) branch regularly to keep the branch history   clean and up to date.</li> <li>Use the squash merge option when merging branches to keep the commit history clean.</li> </ul>"},{"location":"git-basics/git-best-practices/#leverage-gitignore","title":"Leverage <code>.gitignore</code>","text":"<ul> <li>Exclude files that shouldn't be tracked (e.g., build artifacts, local config files, IDE settings,   logs).  Use a <code>.gitignore</code> file trailored to your project.  There are templates available online,   and GitHub offers a wide variety of templates for different languages and frameworks when you   create a new repository.</li> <li>Use the <code>git add -f</code> command to force add files that are ignored by <code>.gitignore</code>.</li> <li>Example <code>.gitignore</code>:</li> </ul> <pre><code># Ignore all files in the build directory\nbuild/\n\n# Ignore all logs\n*.log\n\n# Igore node modules\nnode_modules/\n\n# Ignore all files in the temp directory\ntemp/*\n</code></pre>"},{"location":"git-basics/git-best-practices/#review-code-before-merging","title":"Review code before merging","text":"<ul> <li>Use GitHub pull requests (PRs).  This ensures code is reviewed by peers.</li> <li>Use branch protection rules to enforce code reviews and prevent direct merges into <code>main</code> (or   <code>master</code>).</li> <li>Test your changes locally before submitting a PR.</li> <li>Keep PRs small and focused (e.g., one feature or bug fix).</li> <li>Write a detailed PR description that includes the changes made and the rationale behind them.</li> <li>Use the squash merge option when merging branches to keep the commit history clean.</li> </ul>"},{"location":"git-basics/git-best-practices/#tag-releases","title":"Tag releases","text":"<ul> <li>Use annotated tags for releases or significant milestones (<code>git tag -a v1.0.0 -m \"Release   1.0.0\"</code>).  This helps track stable versions for your project.</li> <li>Push tags to the remote repository (<code>git push origin v1.0.0</code>).</li> <li>Use the GitHub web interface to create releases from tags.  For more advanced users, automate the   release process.</li> </ul>"},{"location":"git-basics/git-best-practices/#backup-and-sync-with-remotes","title":"Backup and sync with remotes","text":"<ul> <li>Regularly push your local branch to the remote repository (<code>git push origin &lt;branch-name&gt;</code>).  This   acts as a backup and enables collaboration.</li> <li>Avoid force-pushing (<code>git push --force</code>) to the remote repository unless absolutely necessary, as   it overwrites history and can disrupt others.  You can prevent force-pushes with a branch   protection rule or a pre-receive hook.</li> <li>Regularly pull updates from the remote repository (<code>git pull</code>).</li> </ul>"},{"location":"git-basics/git-best-practices/#use-git-tools-and-aliases","title":"Use Git tools and aliases","text":"<ul> <li>Learn commands like <code>git log</code>, <code>git blame</code>, and <code>git diff</code> to understand changes.</li> <li>Set up aliases for frequent commands in your <code>.gitconfig</code> file.  Example:</li> </ul> <pre><code>[alias]\n  co = checkout\n  cm = commit\n  st = status\n</code></pre> <ul> <li>Use <code>git stash</code> to temporarily save uncommitted changes when switching branches.</li> <li>Familiarize yourself with <code>git reset</code>, <code>git revert</code>, and <code>git reflog</code>, to recover from errors.</li> <li>Use <code>git bisect</code> to find the commit that introduced a bug.</li> <li>Use <code>git cherry-pick</code> to apply specific commits from one branch to another.</li> <li>Use <code>git rebase</code> to keep a cleaner history when working on your branch.</li> </ul>"},{"location":"git-basics/git-best-practices/#keep-history-clean","title":"Keep history clean","text":"<ul> <li>Squash unnecessary commits before merging  (<code>git rebase -i</code>) to maintain a readable history.</li> <li>Avoid committing sensitive data (e.g., API keys, passwords, etc.) in the repository.  Use   environment variables or a secrets manager instead.  If it happens, use <code>git filter-branch</code> to   remove the sensitive data.</li> </ul>"},{"location":"git-basics/git-best-practices/#document-your-workflow","title":"Document your workflow","text":"<ul> <li>Agree on a team workflow (e.g., Git Flow) and document it in a <code>README.md</code> or wiki.</li> <li>Include setup instructions, branching rules, and contribution guidelines.</li> </ul>"},{"location":"git-basics/installing-git/","title":"Installing Git","text":""},{"location":"git-basics/installing-git/#installing-on-windows","title":"Installing on Windows","text":"<p>The most official build is available on the Git website. Download the installer and run it.  The default options are more than sufficient for most users.</p> <p>You can also install Git via Chocolatey.  If you have Chocolatey installed, you can install Git with the following command:</p> <pre><code>choco install git\n</code></pre>"},{"location":"git-basics/installing-git/#installing-on-macos","title":"Installing on macOS","text":"<p>If you are a macOS user, Git may already be installed.  You can check if Git is installed by running the following command:</p> <pre><code>git --version\n</code></pre> <p>There are several ways to install Git on macOS.  The easiest way is to install the XCode Command Line Tools.</p> <pre><code>xcode-select --install\n</code></pre> <p>You can also install Git using Homebrew.  If you have Homebrew installed, you can install Git with the following command:</p> <pre><code>brew install git\n</code></pre>"},{"location":"git-basics/pr-merging-guidelines/","title":"Pull Request Merging Guidelines","text":"<p>Keeping a clean Git history is important for a number of reasons.  It makes it easier to understand the history of the codebase, it makes it easier to revert changes if necessary, and it makes it easier to cherry-pick changes onto other branches.</p>"},{"location":"git-basics/pr-merging-guidelines/#merge-requirements","title":"Merge Requirements","text":"<p>In order to merge a pull request, the following requirements must be met:</p> <ul> <li>The pull request must be approved by at least one other developer.</li> <li>The pull request must pass all automated checks.</li> <li>When merging, the pull request must be squashed.</li> </ul>"},{"location":"git-basics/pr-merging-guidelines/#squashing-commits","title":"Squashing Commits","text":"<p>When merging a pull request, the commits should be squashed into a single commit.  This makes the Git history cleaner and easier to understand.  When squashing commits, the commit message should be updated to reflect the changes made in the pull request, and should follow the conventional commits specification.  The commit message should be descriptive and include the issue number if it is related to a specific issue.  Adding a description of the changes made in the commit message body is optional.</p>"},{"location":"git-basics/pr-merging-guidelines/#examples","title":"Examples","text":"<p>Here are some examples of commit messages that follow the conventional commits specification:</p>"},{"location":"git-basics/pr-merging-guidelines/#with-scope","title":"With scope","text":"<pre><code>feat(feature-name): add feature description\n\n- Add feature description\n- Add feature description\n- Add feature description\n- Add feature description\n- Add feature description\n</code></pre>"},{"location":"git-basics/pr-merging-guidelines/#without-scope","title":"Without scope","text":"<pre><code>feat: add feature description\n\n- Add feature description\n- Add feature description\n</code></pre>"},{"location":"git-basics/pr-merging-guidelines/#with-issue-number","title":"With issue number","text":"<pre><code>feat: add feature description\n\n- Add feature description\n- Add feature description\n- Add feature description\n- Add feature description\n- Add feature description\n\nCloses #123\n</code></pre>"},{"location":"git-basics/pr-merging-guidelines/#commit-with-subject-only","title":"Commit with subject only","text":"<pre><code>feat: add feature description\n</code></pre>"},{"location":"git-basics/what-is-git/","title":"What is Git?","text":"<p>Git is a distributed version control system that allows you to track changes in any set of files. In simple terms, it\u2019s a tool that tracks modifications to your project\u2014whether it\u2019s code, documents, or any other type of file\u2014allowing you to see what was changed, when, and by whom. Unlike centralized systems, Git lets every user have a complete copy of the project\u2019s history, making it highly flexible and efficient. Think of it as a time machine for your work: you can revisit any previous version or collaborate with others without losing track of progress.</p>"},{"location":"git-basics/what-is-git/#why-use-git","title":"Why use Git?","text":"<p>Git is widely adopted for good reason.  It includes the following key benefits:</p> <ol> <li>Collaboration made easy: Git excels at enabling teamwork. Multiple people can work on the    same project simultaneously without overwriting each other\u2019s contributions. Changes from    different contributors can be merged seamlessly, avoiding conflicts and chaos. This makes it    ideal for software development, writing, or any group project.</li> <li>Complete Project History: With Git, every change is logged, creating a detailed timeline of    your project. You can look back at any point to see what the files looked like, understand how    the project evolved, or pinpoint when an issue was introduced. This history is invaluable for    debugging and learning from past decisions.</li> <li>Safe Experimentation with Branching: Git\u2019s branching feature lets you create separate paths    for development. Want to try a bold new idea? Work on it in a branch without risking the main    project. If it succeeds, merge it back; if it fails, discard it\u2014no harm done. This encourages    creativity and experimentation without fear.</li> <li>Built-in Backup: Since Git stores the full history of your project locally (and often on    remote servers like GitHub), it doubles as a backup system. If something goes wrong\u2014like a file    being deleted or corrupted\u2014you can revert to a previous state with ease.</li> <li>Free and Open Source: Git is open source, meaning it\u2019s free to use and supported by a massive    community. This ensures constant improvements, a wealth of tutorials, and integration with    countless tools, making it accessible to everyone.</li> </ol>"},{"location":"using-github/","title":"Using Github Effectively","text":"<p>This section contains links to guides and best practices for using GitHub effectively.</p> <ul> <li>GitHub Access Control</li> <li>Creating a Repository</li> <li>Creating a Pull Request</li> <li>Creating a Pull Request Template</li> <li>Using GitHub Wikis</li> <li>Using GitHub Discussions</li> <li>Managing GitHub Actions</li> <li>Using GitHub Issues</li> </ul>"},{"location":"using-github/creating-a-pull-request-template/","title":"Creating a Pull Request Template","text":""},{"location":"using-github/creating-a-pull-request-template/#what-is-a-pull-request-template","title":"What is a pull request template?","text":"<p>A pull request (PR) template is a markdown file that provides a standardized structure for contributors to follow when submitting pull requests on GitHub. It ensures that all necessary information\u2014such as a description of changes, related issues, and testing instructions\u2014is included, making the review process smoother and more efficient.</p>"},{"location":"using-github/creating-a-pull-request-template/#why-use-a-pull-request-template","title":"Why use a pull request template?","text":"<ul> <li>Consistency: Ensures every PR follows the same format, making it easier for reviewers to find   key information.</li> <li>Clarity: Guides contributors to provide essential details, reducing back-and-forth communication.</li> <li>Efficiency: Streamlines the review process by ensuring reviewers have all the context they   need upfront.</li> <li>Quality: Encourages thoroughness, such as including testing steps or linking related issues.</li> </ul>"},{"location":"using-github/creating-a-pull-request-template/#creating-a-pull-request-template_1","title":"Creating a pull request template","text":"<p>Consult the GitHub documentation for the most up-to-date information on how to create a pull request template.</p>"},{"location":"using-github/creating-a-repository/","title":"Creating a Repository","text":"<p>Consult the GitHub documentation for the most up-to-date information on how to create a repository.</p>"},{"location":"using-github/creating-a-repository/#naming-your-repository","title":"Naming your repository","text":"<ul> <li>Use a descriptive name that reflects the purpose of the repository.</li> <li>Use lowercase letters for the repository name.</li> <li>Use dashes to separate words in the repository name.</li> <li>Avoid using spaces in the repository name.</li> <li>Avoid using special characters in the repository name.</li> <li>Avoid using uppercase letters in the repository name.</li> <li>Prefix your team's repositories with an abbreviation of your team's name.<ul> <li>For example, if your team's name is \"Cloud Genesis\", you could use \"cg\" as the abbreviation   (i.e., <code>cg-project-name</code>).</li> </ul> </li> </ul>"},{"location":"using-github/github-access-control/","title":"GitHub Teams and Access Control","text":"<p>Managing access to specific repositories in a GitHub organization using Teams is a powerful way to streamline permissions, reflect your group\u2019s structure, and maintain security. Here\u2019s how you can do it effectively, based on standard GitHub functionality and best practices:</p> <ul> <li>Understand Teams and Their Role:<ul> <li>In a GitHub organization, Teams are groups of members that can be assigned specific permissions to  repositories. They allow you to manage access collectively rather than individually, which simplifies  administration, especially as your organization grows.</li> <li>Teams can mirror your company\u2019s structure (e.g., \"Frontend Devs,\" \"QA Team\") and support nested hierarchies (parent and child teams), where child teams inherit permissions from their parents.</li> </ul> </li> <li>Create Teams:<ul> <li>Go to your organization\u2019s main page on GitHub.</li> <li>Click the Teams tab.</li> <li>Click New team.</li> <li>Give the team a name (e.g., \"Backend Team\") and an optional description.</li> <li>Choose a parent team if applicable (for inherited permissions).</li> <li>Set the team visibility: \"Visible\" (all org members can see it) or \"Secret\" (only team members can see it).</li> <li>Use descriptive names to reflect the team\u2019s purpose or project focus.</li> </ul> </li> <li>Add Members to Teams:<ul> <li>On the team\u2019s page, go to the Members tab.</li> <li>Click Add a member.</li> <li>Search for organization members by username or email and add them.</li> <li>You can also assign the \"Team Maintainer\" role to specific members, allowing them to manage the team (e.g., add/remove members, adjust settings) without needing full admin rights.</li> <li>Note: Only organization members can be added to teams; outside collaborators are managed separately.</li> </ul> </li> <li>Assign Teams to Repositories:<ul> <li>Navigate to the repository you want to manage.</li> <li>Click Settings (you\u2019ll need admin access to the repo).</li> <li>In the sidebar, select Collaborators and teams.</li> <li>Under \"Manage access,\" click Add teams.</li> <li>Search for the team name and select it.</li> <li>Choose a permission level (see below).</li> </ul> </li> <li>Permission Levels:<ul> <li>Read: View and discuss the repo (good for auditors or non-contributors).</li> <li>Triage: Manage issues and pull requests without write access.</li> <li>Write: Push code and contribute directly.</li> <li>Maintain: Manage repo settings and branches without sensitive actions (e.g., deleting the repo).</li> <li>Admin: Full control, including destructive actions and security settings.</li> </ul> </li> </ul>"}]}